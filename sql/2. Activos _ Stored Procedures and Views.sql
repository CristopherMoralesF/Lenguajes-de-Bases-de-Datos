SET SERVEROUTPUT ON; 

CREATE VIEW RESUMEN_ACTIVOS_CLASE AS
    SELECT 
        C.DESCRIPCION_CLASE,
        COUNT(A.ID_ACTIVO) AS TOTAL_ACTIVOS
    FROM ACTIVO A
    INNER JOIN CLASE C ON C.ID_CLASE = A.ID_CLASE
    GROUP BY C.DESCRIPCION_CLASE;

SELECT * FROM RESUMEN_ACTIVOS_CLASE;


--------------------- Función para crear un resumen de los principales indicadores de los activos correspondientes --------------------- 
CREATE OR REPLACE PROCEDURE FUNC_ESTATUS_ACTIVOS (
    IN_USER_ID      IN USUARIO.ID_USUARIO%TYPE,
    OUT_KPI_RESUME  OUT SYS_REFCURSOR
)
AS  
    C_RESUMEN_ACTIVOS SYS_REFCURSOR;
        
BEGIN

    OPEN C_RESUMEN_ACTIVOS FOR SELECT COUNT(*) AS TOTAL_ACTIVOS, SUM(VALOR_ADQUISICION) AS TOTAL_INVERSION FROM ACTIVO;    
    OUT_KPI_RESUME := C_RESUMEN_ACTIVOS;
          
END;

--------------------- Función para crear un resumen de los principales indicadores de los activos correspondientes v2 --------------------- 
CREATE OR REPLACE PROCEDURE FUNC_ESTATUS_ACTIVOS (
    IN_USER_ID      IN USUARIO.ID_USUARIO%TYPE,
    OUT_KPI_RESUME  OUT SYS_REFCURSOR
)
AS  
    C_RESUMEN_ACTIVOS SYS_REFCURSOR;
        
BEGIN

    OPEN C_RESUMEN_ACTIVOS FOR 
        SELECT
            COUNT(A.ID_ACTIVO) AS TOTAL_ACTIVOS, 
            SUM(A.VALOR_ADQUISICION) AS TOTAL_INVERSION,
            ROUND(AVG(CASE
                WHEN (SELECT COUNT(TV.DESCRIPCION_VALIDACION) FROM TIPO_VALIDACION TV WHERE TV.ID_CLASE = A.ID_CLASE) = 0 OR (SELECT COUNT(V.ID_ACTIVO) FROM VALIDACION V WHERE V.ID_ACTIVO = A.ID_ACTIVO) = 0 THEN
                    0
                ELSE
                    ((SELECT COUNT(V.ID_ACTIVO) FROM VALIDACION V WHERE V.ID_ACTIVO = A.ID_ACTIVO) / (SELECT COUNT(TV.DESCRIPCION_VALIDACION) FROM TIPO_VALIDACION TV WHERE TV.ID_CLASE = A.ID_CLASE)) * 100
            END),2) AS COMPLIANCE_PERCENTAJE,
            SUM(CASE
                WHEN A.ID_OWNER = IN_USER_ID THEN 
                    1
                ELSE 
                    0
            END) AS TOTAL_ASSETS_OWN_BY_USER        
        FROM ACTIVO A; 
        
    OUT_KPI_RESUME := C_RESUMEN_ACTIVOS;
          
END;

------- Comprobación
DECLARE
    OUT_KPI_RESUME SYS_REFCURSOR;
BEGIN
    FUNC_ESTATUS_ACTIVOS(1,OUT_KPI_RESUME);
    DBMS_SQL.RETURN_RESULT(OUT_KPI_RESUME);
END;    
