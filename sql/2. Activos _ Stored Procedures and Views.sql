SET SERVEROUTPUT ON; 

CREATE OR REPLACE VIEW RESUMEN_ACTIVOS_CLASE AS
    SELECT 
        C.DESCRIPCION_CLASE,
        COUNT(A.ID_ACTIVO) AS TOTAL_ACTIVOS
    FROM ACTIVO A
    INNER JOIN CLASE C ON C.ID_CLASE = A.ID_CLASE
    GROUP BY C.DESCRIPCION_CLASE;

SELECT * FROM RESUMEN_ACTIVOS_CLASE;


--------------------- Función para crear un resumen de los principales indicadores de los activos correspondientes --------------------- 
CREATE OR REPLACE PROCEDURE FUNC_ESTATUS_ACTIVOS (
    IN_USER_ID      IN USUARIO.ID_USUARIO%TYPE,
    OUT_KPI_RESUME  OUT SYS_REFCURSOR
)
AS  
    C_RESUMEN_ACTIVOS SYS_REFCURSOR;
        
BEGIN

    OPEN C_RESUMEN_ACTIVOS FOR SELECT COUNT(*) AS TOTAL_ACTIVOS, SUM(VALOR_ADQUISICION) AS TOTAL_INVERSION FROM ACTIVO;    
    OUT_KPI_RESUME := C_RESUMEN_ACTIVOS;
          
END;

--------------------- Función para crear un resumen de los principales indicadores de los activos correspondientes v2 --------------------- 
CREATE OR REPLACE PROCEDURE FUNC_ESTATUS_ACTIVOS (
    IN_USER_ID      IN USUARIO.ID_USUARIO%TYPE,
    OUT_KPI_RESUME  OUT SYS_REFCURSOR
)
AS  
    C_RESUMEN_ACTIVOS SYS_REFCURSOR;
        
BEGIN

    OPEN C_RESUMEN_ACTIVOS FOR 
        SELECT
            COUNT(A.ID_ACTIVO) AS TOTAL_ACTIVOS, 
            SUM(A.VALOR_ADQUISICION) AS TOTAL_INVERSION,
            ROUND(AVG(CASE
                WHEN (SELECT COUNT(TV.DESCRIPCION_VALIDACION) FROM TIPO_VALIDACION TV WHERE TV.ID_CLASE = A.ID_CLASE) = 0 OR (SELECT COUNT(V.ID_ACTIVO) FROM VALIDACION V WHERE V.ID_ACTIVO = A.ID_ACTIVO) = 0 THEN
                    0
                ELSE
                    ((SELECT COUNT(V.ID_ACTIVO) FROM VALIDACION V WHERE V.ID_ACTIVO = A.ID_ACTIVO) / (SELECT COUNT(TV.DESCRIPCION_VALIDACION) FROM TIPO_VALIDACION TV WHERE TV.ID_CLASE = A.ID_CLASE)) * 100
            END),2) AS COMPLIANCE_PERCENTAJE,
            SUM(CASE
                WHEN A.ID_OWNER = IN_USER_ID THEN 
                    1
                ELSE 
                    0
            END) AS TOTAL_ASSETS_OWN_BY_USER        
        FROM ACTIVO A; 
        
    OUT_KPI_RESUME := C_RESUMEN_ACTIVOS;
          
END;

------- Comprobación
DECLARE
    OUT_KPI_RESUME SYS_REFCURSOR;
BEGIN
    FUNC_ESTATUS_ACTIVOS(1,OUT_KPI_RESUME);
    DBMS_SQL.RETURN_RESULT(OUT_KPI_RESUME);
END;    

--------------------- Create view with a resume of assets information --------------------- 
CREATE OR REPLACE VIEW ASSETS_RESUME AS
    SELECT 
        A.ID_ACTIVO,
        A.DESCRIPCION_ACTIVO,
        A.VALOR_ADQUISICION,
        A.FECHA_ADQUISICION,
        C.DESCRIPCION_CLASE,
        C.VIDA_UTIL,
        A.PERIODOS_DEPRECIADOS,
        U.ID_EDIFICIO,
        U.DESCRIPCION_SECCION,
        US.NOMBRE,
        E.DESCRIPCION_ESTADO
    FROM ACTIVO A
    INNER JOIN CLASE C ON C.ID_CLASE = A.ID_CLASE
    INNER JOIN UBICACION U ON U.ID_UBICACIÓN = A.ID_UBICACION
    INNER JOIN USUARIO US ON US.ID_USUARIO = A.ID_OWNER
    INNER JOIN ESTADO E ON E.ID_ESTADO = A.ID_ESTADO;

SELECT * FROM ASSETS_RESUME WHERE ID_ACTIVO = 16;

SELECT * FROM ACTIVO;

COMMIT;


CREATE OR REPLACE PROCEDURE CREATE_ASSET(
    IN_ID_CLASE         IN ACTIVO.ID_CLASE%TYPE,
    IN_ID_UBICACION     IN ACTIVO.ID_UBICACION%TYPE,
    IN_ID_OWNER         IN ACTIVO.ID_OWNER%TYPE,
    IN_ID_ESTADO        IN ACTIVO.ID_ESTADO%TYPE,
    IN_DESCRIPCION      IN ACTIVO.DESCRIPCION_ACTIVO%TYPE,
    IN_VALOR            IN ACTIVO.VALOR_ADQUISICION%TYPE,
    IN_FECHA            IN VARCHAR2,
    OUT_RESULT          OUT VARCHAR2
)
AS
    VAR_FECHA           ACTIVO.FECHA_ADQUISICION%TYPE;    
    VAR_ERROR_TRACKER   VARCHAR2(255);
BEGIN

    VAR_FECHA := TO_DATE(IN_FECHA,'YYYY-MM-DD');
    
    -- Validate de aquisition date.
    IF VAR_FECHA < SYSDATE THEN
        VAR_ERROR_TRACKER := 'Error: The date cannot be in the past';
    END IF;    
    
    -- Validate the asset materiality
    IF IN_VALOR < 500000 THEN
        VAR_ERROR_TRACKER := 'Error: The acquisition value threshold set by the government is 500K CRC';
        
    END IF;    
    
    -- Check if any error
     IF LENGTH(VAR_ERROR_TRACKER) > 0 THEN
        OUT_RESULT := VAR_ERROR_TRACKER;
    ELSE
        OUT_RESULT := 'Successful';
        INSERT INTO 
            ACTIVO (ID_CLASE,ID_UBICACION,ID_OWNER,ID_ESTADO,DESCRIPCION_ACTIVO,VALOR_ADQUISICION,FECHA_ADQUISICION) 
            VALUES (IN_ID_CLASE,IN_ID_UBICACION,IN_ID_OWNER,IN_ID_ESTADO,IN_DESCRIPCION,IN_VALOR,VAR_FECHA);
    END IF; 
    
END;

-- Trigger to create an asset
CREATE OR REPLACE TRIGGER TRG_CREATE_ASSET
AFTER INSERT ON ACTIVO
FOR EACH ROW
DECLARE
    VAR_ACCOUNT_DEBIT   CUENTA_CONTABLE.ID_CUENTA%TYPE;
    VAR_ACCOUNT_CREDIT  CUENTA_CONTABLE.ID_CUENTA%TYPE;
    VAR_JE_DESCRIPTION  VARCHAR(255);
    VAR_NEW_JE_ID       ASIENTO_LINEA.ID_ASIENTO%TYPE;
BEGIN

    -- Select Account
    SELECT ID_CUENTA INTO VAR_ACCOUNT_DEBIT FROM CLASE_CUENTA WHERE ID_CLASE = :NEW.ID_CLASE AND ID_CATEGORIA_CUENTA = 1;
    VAR_ACCOUNT_CREDIT := '1-1-1-101392';
    VAR_JE_DESCRIPTION := 'Asset Recognition: ' || :NEW.ID_CLASE || ' - ' || :NEW.DESCRIPCION_ACTIVO;
    
    
    -- Create journal header
    INSERT INTO ASIENTO (ID_CLASE,FECHA,DESCRIPCIÓN) VALUES (:NEW.ID_CLASE,SYSDATE,VAR_JE_DESCRIPTION) RETURNING ID_ASIENTO INTO VAR_NEW_JE_ID;
    
    -- Create Journal body
    INSERT INTO ASIENTO_LINEA (ID_ASIENTO, ID_CUENTA_CONTABLE,DESCRIPCION_LINEA,DEBITO,CREDITO) VALUES (VAR_NEW_JE_ID,VAR_ACCOUNT_DEBIT,VAR_JE_DESCRIPTION,:NEW.VALOR_ADQUISICION,0);
    INSERT INTO ASIENTO_LINEA (ID_ASIENTO, ID_CUENTA_CONTABLE,DESCRIPCION_LINEA,DEBITO,CREDITO) VALUES (VAR_NEW_JE_ID,VAR_ACCOUNT_CREDIT,VAR_JE_DESCRIPTION,0,:NEW.VALOR_ADQUISICION);
    
    -- Update Account Balance
    -- Debit Account
    UPDATE CUENTA_CONTABLE SET TOTAL_DEBITOS = TOTAL_DEBITOS + :NEW.VALOR_ADQUISICION WHERE ID_CUENTA = VAR_ACCOUNT_DEBIT;
    UPDATE CUENTA_CONTABLE SET BALANCE = TOTAL_DEBITOS - TOTAL_CREDITOS  WHERE ID_CUENTA = VAR_ACCOUNT_DEBIT;   
    
     -- Credit Account
    UPDATE CUENTA_CONTABLE SET TOTAL_CREDITOS = TOTAL_CREDITOS + :NEW.VALOR_ADQUISICION WHERE ID_CUENTA = VAR_ACCOUNT_CREDIT;
    UPDATE CUENTA_CONTABLE SET BALANCE = TOTAL_DEBITOS - TOTAL_CREDITOS  WHERE ID_CUENTA = VAR_ACCOUNT_CREDIT;   
    
    
END;
    


SELECT * FROM CUENTA_CONTABLE;

DECLARE
    IN_ID_CLASE         ACTIVO.ID_CLASE%TYPE;
    IN_ID_UBICACION     ACTIVO.ID_UBICACION%TYPE;
    IN_ID_OWNER         ACTIVO.ID_OWNER%TYPE;
    IN_ID_ESTADO        ACTIVO.ID_ESTADO%TYPE;
    IN_DESCRIPCION      ACTIVO.DESCRIPCION_ACTIVO%TYPE;
    IN_VALOR            ACTIVO.VALOR_ADQUISICION%TYPE;
    IN_FECHA            VARCHAR2(255);
    OUT_RESULT          VARCHAR2(255);
BEGIN
    IN_ID_CLASE := 1;
    IN_ID_UBICACION := 1;
    IN_ID_OWNER := 1;
    IN_DESCRIPCION := 'BMW X1';
    IN_ID_ESTADO := 1;
    IN_VALOR := 300;
    IN_FECHA := '2022-12-23';
    
    CREATE_ASSET(IN_ID_CLASE,IN_ID_UBICACION,IN_ID_OWNER,IN_ID_ESTADO,IN_DESCRIPCION,IN_VALOR,IN_FECHA,OUT_RESULT);
    DBMS_OUTPUT.PUT_LINE(OUT_RESULT);

END;


CREATE OR REPLACE PROCEDURE VALIDATE_RESUME_BY_ASSET(
    IN_ASSET_ID IN ACTIVO.ID_ACTIVO%TYPE,
    OUT_RESULT  OUT SYS_REFCURSOR
)
AS
    VAR_ASSET_CLASS ACTIVO.ID_CLASE%TYPE;
    C_RESULT SYS_REFCURSOR;
BEGIN

    SELECT ID_CLASE INTO VAR_ASSET_CLASS FROM ACTIVO WHERE ID_ACTIVO = IN_ASSET_ID;
    
    
    OPEN C_RESULT FOR 
        SELECT
            TV.ID_TIPO_VALIDACION,
            TV.DESCRIPCION_VALIDACION,
            (SELECT VALOR FROM VALIDACION V WHERE V.ID_TIPO_VALIDACION = TV.ID_TIPO_VALIDACION AND V.ID_ACTIVO = IN_ASSET_ID) AS VALOR
        FROM TIPO_VALIDACION TV
        WHERE ID_CLASE = VAR_ASSET_CLASS;  
        
    OUT_RESULT := C_RESULT;
    
END;

--- Comprobación
DECLARE
    VAR_ASSET_ID    ACTIVO.ID_ACTIVO%TYPE;
    OUT_RESULT      SYS_REFCURSOR;
BEGIN

    VAR_ASSET_ID := 4;
    VALIDATE_RESUME_BY_ASSET(VAR_ASSET_ID,OUT_RESULT);
    DBMS_SQL.RETURN_RESULT(OUT_RESULT);
    
END;


--- Create view for accounting dashboard asset on risk table
CREATE OR REPLACE VIEW ASSETS_RISK_ASSESSMENT AS
    SELECT 
        A.*,
        CASE
            WHEN (A.VALIDATION_PERCENTAJE < 0.5) THEN 'H'
            WHEN (A.VALIDATION_PERCENTAJE > 0.5 AND A.VALIDATION_PERCENTAJE < 0.8) THEN 'M'
            ELSE 'L'
        END AS RISK_ASSESMENT   
         
    FROM (
        SELECT 
            A.ID_ACTIVO,
            A.ID_OWNER,
            A.DESCRIPCION_ACTIVO,
            C.DESCRIPCION_CLASE,
           ROUND((SELECT COUNT(*) FROM VALIDACION V WHERE V.ID_ACTIVO = A.ID_ACTIVO) / (SELECT COUNT(*) FROM TIPO_VALIDACION TP WHERE TP.ID_CLASE = A.ID_CLASE),2) AS VALIDATION_PERCENTAJE
        FROM ACTIVO A
        INNER JOIN CLASE C ON C.ID_CLASE = A.ID_CLASE
    ) A
    ORDER BY RISK_ASSESMENT,A.ID_ACTIVO;

CREATE OR REPLACE VIEW ASSETS_RISK_ASSESSMENT_RESUME AS    
    SELECT 
        DESCRIPCION_CLASE,
        RISK_ASSESMENT,
        COUNT(*) AS  TOTAL_ASSETS
    FROM ASSETS_RISK_ASSESSMENT
    GROUP BY RISK_ASSESMENT,DESCRIPCION_CLASE
    ORDER BY DESCRIPCION_CLASE;   

SELECT * FROM ASSETS_RISK_ASSESSMENT;

COMMIT;


